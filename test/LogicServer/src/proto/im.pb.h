// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#ifndef PROTOBUF_INCLUDED_im_2eproto
#define PROTOBUF_INCLUDED_im_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2eproto 

namespace protobuf_im_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_im_2eproto
namespace im {
class CtrlFriendRequest;
class CtrlFriendRequestDefaultTypeInternal;
extern CtrlFriendRequestDefaultTypeInternal _CtrlFriendRequest_default_instance_;
class CtrlFriendResponse;
class CtrlFriendResponseDefaultTypeInternal;
extern CtrlFriendResponseDefaultTypeInternal _CtrlFriendResponse_default_instance_;
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class MessageItem;
class MessageItemDefaultTypeInternal;
extern MessageItemDefaultTypeInternal _MessageItem_default_instance_;
class MessageResponse;
class MessageResponseDefaultTypeInternal;
extern MessageResponseDefaultTypeInternal _MessageResponse_default_instance_;
class UserLoginRequest;
class UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
class UserLoginResponse;
class UserLoginResponseDefaultTypeInternal;
extern UserLoginResponseDefaultTypeInternal _UserLoginResponse_default_instance_;
class UserLogoutRequest;
class UserLogoutRequestDefaultTypeInternal;
extern UserLogoutRequestDefaultTypeInternal _UserLogoutRequest_default_instance_;
class UserRegisterRequest;
class UserRegisterRequestDefaultTypeInternal;
extern UserRegisterRequestDefaultTypeInternal _UserRegisterRequest_default_instance_;
class UserRegisterResponse;
class UserRegisterResponseDefaultTypeInternal;
extern UserRegisterResponseDefaultTypeInternal _UserRegisterResponse_default_instance_;
}  // namespace im
namespace google {
namespace protobuf {
template<> ::im::CtrlFriendRequest* Arena::CreateMaybeMessage<::im::CtrlFriendRequest>(Arena*);
template<> ::im::CtrlFriendResponse* Arena::CreateMaybeMessage<::im::CtrlFriendResponse>(Arena*);
template<> ::im::Friend* Arena::CreateMaybeMessage<::im::Friend>(Arena*);
template<> ::im::MessageItem* Arena::CreateMaybeMessage<::im::MessageItem>(Arena*);
template<> ::im::MessageResponse* Arena::CreateMaybeMessage<::im::MessageResponse>(Arena*);
template<> ::im::UserLoginRequest* Arena::CreateMaybeMessage<::im::UserLoginRequest>(Arena*);
template<> ::im::UserLoginResponse* Arena::CreateMaybeMessage<::im::UserLoginResponse>(Arena*);
template<> ::im::UserLogoutRequest* Arena::CreateMaybeMessage<::im::UserLogoutRequest>(Arena*);
template<> ::im::UserRegisterRequest* Arena::CreateMaybeMessage<::im::UserRegisterRequest>(Arena*);
template<> ::im::UserRegisterResponse* Arena::CreateMaybeMessage<::im::UserRegisterResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im {

enum MSG {
  START = 0,
  REGISTER_REQUEST = 10001,
  REGISTER_RESPONSE = 10011,
  LOGIN_REQUEST = 10002,
  LOGIN_RESPONSE = 10012,
  LOGOUT_REQUEST = 10003,
  FRIEND_LIST_REQUEST = 20001,
  FRIEND_LIST_RESPONSE = 20011,
  FRIEND_FIND_REQUEST = 20002,
  FRIEND_FIND_RESPONSE = 20012,
  FRIEND_ADD_REQUEST = 20003,
  FRIEND_ADD_RESPONSE = 20013,
  FRIEND_DELETE_REQUEST = 20004,
  FRIEND_DELETE_RESPONSE = 20014,
  GROUP_CREATE_REQUEST = 30001,
  GROUP_CRAETE_RESPONSE = 30011,
  GROUP_ADDMEMBER_REQUEST = 30002,
  GROUP_ADDMEMBER_RESPONSE = 30012,
  GROUP_DELETEMEMBER_REQUEST = 30003,
  GROUP_DELETEMEMBER_RESPONSE = 30013,
  GROUP_DELETE_REQUEST = 30004,
  GROUP_DELETE_RESPONSE = 30014,
  GROUP_EXIT_REQUESET = 30005,
  GROUP_EXIT_RESPONSE = 30015,
  MESSAGE_FRIEND_SEND_REQUEST = 40001,
  MESSAGE_FRIEND_RESPONSE = 40011,
  MESSAGE_GROUP_SEND_REQUEST = 40002,
  MESSAGE_GROUP_SEND_RESPONSE = 40012,
  MESSAGE_FRIEND_NOTIFY_REQUEST = 40003,
  MESSAGE_FRIEND_NOTIFY_RESPONSE = 40013,
  MESSAGE_GROUP_NOTIFY_REQUEST = 40004,
  MESSAGE_GROUP_NOTIFY_RESPONSE = 40014,
  MSG_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MSG_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MSG_IsValid(int value);
const MSG MSG_MIN = START;
const MSG MSG_MAX = MESSAGE_GROUP_NOTIFY_RESPONSE;
const int MSG_ARRAYSIZE = MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_descriptor();
inline const ::std::string& MSG_Name(MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_descriptor(), value);
}
inline bool MSG_Parse(
    const ::std::string& name, MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG>(
    MSG_descriptor(), name, value);
}
enum Status {
  OK = 0,
  ERR = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_IsValid(int value);
const Status Status_MIN = OK;
const Status Status_MAX = ERR;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class UserRegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.UserRegisterRequest) */ {
 public:
  UserRegisterRequest();
  virtual ~UserRegisterRequest();

  UserRegisterRequest(const UserRegisterRequest& from);

  inline UserRegisterRequest& operator=(const UserRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterRequest(UserRegisterRequest&& from) noexcept
    : UserRegisterRequest() {
    *this = ::std::move(from);
  }

  inline UserRegisterRequest& operator=(UserRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const UserRegisterRequest*>(
               &_UserRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserRegisterRequest* other);
  friend void swap(UserRegisterRequest& a, UserRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterRequest* New() const final {
    return CreateMaybeMessage<UserRegisterRequest>(NULL);
  }

  UserRegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegisterRequest& from);
  void MergeFrom(const UserRegisterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:im.UserRegisterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.UserRegisterResponse) */ {
 public:
  UserRegisterResponse();
  virtual ~UserRegisterResponse();

  UserRegisterResponse(const UserRegisterResponse& from);

  inline UserRegisterResponse& operator=(const UserRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterResponse(UserRegisterResponse&& from) noexcept
    : UserRegisterResponse() {
    *this = ::std::move(from);
  }

  inline UserRegisterResponse& operator=(UserRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const UserRegisterResponse*>(
               &_UserRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserRegisterResponse* other);
  friend void swap(UserRegisterResponse& a, UserRegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterResponse* New() const final {
    return CreateMaybeMessage<UserRegisterResponse>(NULL);
  }

  UserRegisterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegisterResponse& from);
  void MergeFrom(const UserRegisterResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err_msg = 2;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im.UserRegisterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.UserLoginRequest) */ {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserLoginRequest* other);
  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRequest* New() const final {
    return CreateMaybeMessage<UserLoginRequest>(NULL);
  }

  UserLoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:im.UserLoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.UserLoginResponse) */ {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();

  UserLoginResponse(const UserLoginResponse& from);

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginResponse(UserLoginResponse&& from) noexcept
    : UserLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserLoginResponse& operator=(UserLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponse*>(
               &_UserLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserLoginResponse* other);
  friend void swap(UserLoginResponse& a, UserLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginResponse* New() const final {
    return CreateMaybeMessage<UserLoginResponse>(NULL);
  }

  UserLoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err_msg = 3;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // int64 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im.UserLoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.UserLogoutRequest) */ {
 public:
  UserLogoutRequest();
  virtual ~UserLogoutRequest();

  UserLogoutRequest(const UserLogoutRequest& from);

  inline UserLogoutRequest& operator=(const UserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogoutRequest(UserLogoutRequest&& from) noexcept
    : UserLogoutRequest() {
    *this = ::std::move(from);
  }

  inline UserLogoutRequest& operator=(UserLogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogoutRequest* internal_default_instance() {
    return reinterpret_cast<const UserLogoutRequest*>(
               &_UserLogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UserLogoutRequest* other);
  friend void swap(UserLogoutRequest& a, UserLogoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogoutRequest* New() const final {
    return CreateMaybeMessage<UserLogoutRequest>(NULL);
  }

  UserLogoutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLogoutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLogoutRequest& from);
  void MergeFrom(const UserLogoutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:im.UserLogoutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int64 uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.Friend) */ {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(Friend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Friend* other);
  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return CreateMaybeMessage<Friend>(NULL);
  }

  Friend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fnickname = 2;
  void clear_fnickname();
  static const int kFnicknameFieldNumber = 2;
  const ::std::string& fnickname() const;
  void set_fnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_fnickname(::std::string&& value);
  #endif
  void set_fnickname(const char* value);
  void set_fnickname(const char* value, size_t size);
  ::std::string* mutable_fnickname();
  ::std::string* release_fnickname();
  void set_allocated_fnickname(::std::string* fnickname);

  // int64 fid = 1;
  void clear_fid();
  static const int kFidFieldNumber = 1;
  ::google::protobuf::int64 fid() const;
  void set_fid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:im.Friend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fnickname_;
  ::google::protobuf::int64 fid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CtrlFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.CtrlFriendRequest) */ {
 public:
  CtrlFriendRequest();
  virtual ~CtrlFriendRequest();

  CtrlFriendRequest(const CtrlFriendRequest& from);

  inline CtrlFriendRequest& operator=(const CtrlFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CtrlFriendRequest(CtrlFriendRequest&& from) noexcept
    : CtrlFriendRequest() {
    *this = ::std::move(from);
  }

  inline CtrlFriendRequest& operator=(CtrlFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtrlFriendRequest* internal_default_instance() {
    return reinterpret_cast<const CtrlFriendRequest*>(
               &_CtrlFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CtrlFriendRequest* other);
  friend void swap(CtrlFriendRequest& a, CtrlFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtrlFriendRequest* New() const final {
    return CreateMaybeMessage<CtrlFriendRequest>(NULL);
  }

  CtrlFriendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CtrlFriendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CtrlFriendRequest& from);
  void MergeFrom(const CtrlFriendRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtrlFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // int64 fid = 2;
  void clear_fid();
  static const int kFidFieldNumber = 2;
  ::google::protobuf::int64 fid() const;
  void set_fid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:im.CtrlFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 fid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CtrlFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.CtrlFriendResponse) */ {
 public:
  CtrlFriendResponse();
  virtual ~CtrlFriendResponse();

  CtrlFriendResponse(const CtrlFriendResponse& from);

  inline CtrlFriendResponse& operator=(const CtrlFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CtrlFriendResponse(CtrlFriendResponse&& from) noexcept
    : CtrlFriendResponse() {
    *this = ::std::move(from);
  }

  inline CtrlFriendResponse& operator=(CtrlFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtrlFriendResponse* internal_default_instance() {
    return reinterpret_cast<const CtrlFriendResponse*>(
               &_CtrlFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CtrlFriendResponse* other);
  friend void swap(CtrlFriendResponse& a, CtrlFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtrlFriendResponse* New() const final {
    return CreateMaybeMessage<CtrlFriendResponse>(NULL);
  }

  CtrlFriendResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CtrlFriendResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CtrlFriendResponse& from);
  void MergeFrom(const CtrlFriendResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtrlFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.Friend friends = 3;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 3;
  ::im::Friend* mutable_friends(int index);
  ::google::protobuf::RepeatedPtrField< ::im::Friend >*
      mutable_friends();
  const ::im::Friend& friends(int index) const;
  ::im::Friend* add_friends();
  const ::google::protobuf::RepeatedPtrField< ::im::Friend >&
      friends() const;

  // string err_msg = 2;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im.CtrlFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::Friend > friends_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.MessageItem) */ {
 public:
  MessageItem();
  virtual ~MessageItem();

  MessageItem(const MessageItem& from);

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageItem(MessageItem&& from) noexcept
    : MessageItem() {
    *this = ::std::move(from);
  }

  inline MessageItem& operator=(MessageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageItem* internal_default_instance() {
    return reinterpret_cast<const MessageItem*>(
               &_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MessageItem* other);
  friend void swap(MessageItem& a, MessageItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageItem* New() const final {
    return CreateMaybeMessage<MessageItem>(NULL);
  }

  MessageItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageItem& from);
  void MergeFrom(const MessageItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int64 fromid = 1;
  void clear_fromid();
  static const int kFromidFieldNumber = 1;
  ::google::protobuf::int64 fromid() const;
  void set_fromid(::google::protobuf::int64 value);

  // int64 toid = 2;
  void clear_toid();
  static const int kToidFieldNumber = 2;
  ::google::protobuf::int64 toid() const;
  void set_toid(::google::protobuf::int64 value);

  // int64 msgid = 4;
  void clear_msgid();
  static const int kMsgidFieldNumber = 4;
  ::google::protobuf::int64 msgid() const;
  void set_msgid(::google::protobuf::int64 value);

  // int64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:im.MessageItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int64 fromid_;
  ::google::protobuf::int64 toid_;
  ::google::protobuf::int64 msgid_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.MessageResponse) */ {
 public:
  MessageResponse();
  virtual ~MessageResponse();

  MessageResponse(const MessageResponse& from);

  inline MessageResponse& operator=(const MessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageResponse(MessageResponse&& from) noexcept
    : MessageResponse() {
    *this = ::std::move(from);
  }

  inline MessageResponse& operator=(MessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageResponse* internal_default_instance() {
    return reinterpret_cast<const MessageResponse*>(
               &_MessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MessageResponse* other);
  friend void swap(MessageResponse& a, MessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageResponse* New() const final {
    return CreateMaybeMessage<MessageResponse>(NULL);
  }

  MessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageResponse& from);
  void MergeFrom(const MessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 msgid = 1;
  void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  ::google::protobuf::int64 msgid() const;
  void set_msgid(::google::protobuf::int64 value);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:im.MessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 msgid_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegisterRequest

// string number = 1;
inline void UserRegisterRequest::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::number() const {
  // @@protoc_insertion_point(field_get:im.UserRegisterRequest.number)
  return number_.GetNoArena();
}
inline void UserRegisterRequest::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserRegisterRequest.number)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserRegisterRequest.number)
}
#endif
inline void UserRegisterRequest::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserRegisterRequest.number)
}
inline void UserRegisterRequest::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserRegisterRequest.number)
}
inline ::std::string* UserRegisterRequest::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:im.UserRegisterRequest.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_number() {
  // @@protoc_insertion_point(field_release:im.UserRegisterRequest.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:im.UserRegisterRequest.number)
}

// string password = 2;
inline void UserRegisterRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:im.UserRegisterRequest.password)
  return password_.GetNoArena();
}
inline void UserRegisterRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserRegisterRequest.password)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserRegisterRequest.password)
}
#endif
inline void UserRegisterRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserRegisterRequest.password)
}
inline void UserRegisterRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserRegisterRequest.password)
}
inline ::std::string* UserRegisterRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:im.UserRegisterRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_password() {
  // @@protoc_insertion_point(field_release:im.UserRegisterRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:im.UserRegisterRequest.password)
}

// string nickname = 3;
inline void UserRegisterRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::nickname() const {
  // @@protoc_insertion_point(field_get:im.UserRegisterRequest.nickname)
  return nickname_.GetNoArena();
}
inline void UserRegisterRequest::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserRegisterRequest.nickname)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserRegisterRequest.nickname)
}
#endif
inline void UserRegisterRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserRegisterRequest.nickname)
}
inline void UserRegisterRequest::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserRegisterRequest.nickname)
}
inline ::std::string* UserRegisterRequest::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:im.UserRegisterRequest.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:im.UserRegisterRequest.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:im.UserRegisterRequest.nickname)
}

// string ip = 4;
inline void UserRegisterRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::ip() const {
  // @@protoc_insertion_point(field_get:im.UserRegisterRequest.ip)
  return ip_.GetNoArena();
}
inline void UserRegisterRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserRegisterRequest.ip)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserRegisterRequest.ip)
}
#endif
inline void UserRegisterRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserRegisterRequest.ip)
}
inline void UserRegisterRequest::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserRegisterRequest.ip)
}
inline ::std::string* UserRegisterRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:im.UserRegisterRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_ip() {
  // @@protoc_insertion_point(field_release:im.UserRegisterRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:im.UserRegisterRequest.ip)
}

// -------------------------------------------------------------------

// UserRegisterResponse

// int32 status = 1;
inline void UserRegisterResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 UserRegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:im.UserRegisterResponse.status)
  return status_;
}
inline void UserRegisterResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:im.UserRegisterResponse.status)
}

// string err_msg = 2;
inline void UserRegisterResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:im.UserRegisterResponse.err_msg)
  return err_msg_.GetNoArena();
}
inline void UserRegisterResponse::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserRegisterResponse.err_msg)
}
#if LANG_CXX11
inline void UserRegisterResponse::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserRegisterResponse.err_msg)
}
#endif
inline void UserRegisterResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserRegisterResponse.err_msg)
}
inline void UserRegisterResponse::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserRegisterResponse.err_msg)
}
inline ::std::string* UserRegisterResponse::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:im.UserRegisterResponse.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:im.UserRegisterResponse.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:im.UserRegisterResponse.err_msg)
}

// -------------------------------------------------------------------

// UserLoginRequest

// string number = 1;
inline void UserLoginRequest::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::number() const {
  // @@protoc_insertion_point(field_get:im.UserLoginRequest.number)
  return number_.GetNoArena();
}
inline void UserLoginRequest::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserLoginRequest.number)
}
#if LANG_CXX11
inline void UserLoginRequest::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserLoginRequest.number)
}
#endif
inline void UserLoginRequest::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserLoginRequest.number)
}
inline void UserLoginRequest::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserLoginRequest.number)
}
inline ::std::string* UserLoginRequest::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:im.UserLoginRequest.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_number() {
  // @@protoc_insertion_point(field_release:im.UserLoginRequest.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:im.UserLoginRequest.number)
}

// string password = 2;
inline void UserLoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:im.UserLoginRequest.password)
  return password_.GetNoArena();
}
inline void UserLoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserLoginRequest.password)
}
#if LANG_CXX11
inline void UserLoginRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserLoginRequest.password)
}
#endif
inline void UserLoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserLoginRequest.password)
}
inline void UserLoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserLoginRequest.password)
}
inline ::std::string* UserLoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:im.UserLoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:im.UserLoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:im.UserLoginRequest.password)
}

// string ip = 3;
inline void UserLoginRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::ip() const {
  // @@protoc_insertion_point(field_get:im.UserLoginRequest.ip)
  return ip_.GetNoArena();
}
inline void UserLoginRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserLoginRequest.ip)
}
#if LANG_CXX11
inline void UserLoginRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserLoginRequest.ip)
}
#endif
inline void UserLoginRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserLoginRequest.ip)
}
inline void UserLoginRequest::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserLoginRequest.ip)
}
inline ::std::string* UserLoginRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:im.UserLoginRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_ip() {
  // @@protoc_insertion_point(field_release:im.UserLoginRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:im.UserLoginRequest.ip)
}

// -------------------------------------------------------------------

// UserLoginResponse

// int32 status = 1;
inline void UserLoginResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 UserLoginResponse::status() const {
  // @@protoc_insertion_point(field_get:im.UserLoginResponse.status)
  return status_;
}
inline void UserLoginResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:im.UserLoginResponse.status)
}

// int64 uid = 2;
inline void UserLoginResponse::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserLoginResponse::uid() const {
  // @@protoc_insertion_point(field_get:im.UserLoginResponse.uid)
  return uid_;
}
inline void UserLoginResponse::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:im.UserLoginResponse.uid)
}

// string err_msg = 3;
inline void UserLoginResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:im.UserLoginResponse.err_msg)
  return err_msg_.GetNoArena();
}
inline void UserLoginResponse::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserLoginResponse.err_msg)
}
#if LANG_CXX11
inline void UserLoginResponse::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserLoginResponse.err_msg)
}
#endif
inline void UserLoginResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserLoginResponse.err_msg)
}
inline void UserLoginResponse::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserLoginResponse.err_msg)
}
inline ::std::string* UserLoginResponse::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:im.UserLoginResponse.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:im.UserLoginResponse.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:im.UserLoginResponse.err_msg)
}

// -------------------------------------------------------------------

// UserLogoutRequest

// int64 uid = 1;
inline void UserLogoutRequest::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserLogoutRequest::uid() const {
  // @@protoc_insertion_point(field_get:im.UserLogoutRequest.uid)
  return uid_;
}
inline void UserLogoutRequest::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:im.UserLogoutRequest.uid)
}

// string ip = 2;
inline void UserLogoutRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLogoutRequest::ip() const {
  // @@protoc_insertion_point(field_get:im.UserLogoutRequest.ip)
  return ip_.GetNoArena();
}
inline void UserLogoutRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserLogoutRequest.ip)
}
#if LANG_CXX11
inline void UserLogoutRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserLogoutRequest.ip)
}
#endif
inline void UserLogoutRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserLogoutRequest.ip)
}
inline void UserLogoutRequest::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserLogoutRequest.ip)
}
inline ::std::string* UserLogoutRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:im.UserLogoutRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLogoutRequest::release_ip() {
  // @@protoc_insertion_point(field_release:im.UserLogoutRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogoutRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:im.UserLogoutRequest.ip)
}

// -------------------------------------------------------------------

// Friend

// int64 fid = 1;
inline void Friend::clear_fid() {
  fid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Friend::fid() const {
  // @@protoc_insertion_point(field_get:im.Friend.fid)
  return fid_;
}
inline void Friend::set_fid(::google::protobuf::int64 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:im.Friend.fid)
}

// string fnickname = 2;
inline void Friend::clear_fnickname() {
  fnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Friend::fnickname() const {
  // @@protoc_insertion_point(field_get:im.Friend.fnickname)
  return fnickname_.GetNoArena();
}
inline void Friend::set_fnickname(const ::std::string& value) {
  
  fnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.Friend.fnickname)
}
#if LANG_CXX11
inline void Friend::set_fnickname(::std::string&& value) {
  
  fnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.Friend.fnickname)
}
#endif
inline void Friend::set_fnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.Friend.fnickname)
}
inline void Friend::set_fnickname(const char* value, size_t size) {
  
  fnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.Friend.fnickname)
}
inline ::std::string* Friend::mutable_fnickname() {
  
  // @@protoc_insertion_point(field_mutable:im.Friend.fnickname)
  return fnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Friend::release_fnickname() {
  // @@protoc_insertion_point(field_release:im.Friend.fnickname)
  
  return fnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Friend::set_allocated_fnickname(::std::string* fnickname) {
  if (fnickname != NULL) {
    
  } else {
    
  }
  fnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fnickname);
  // @@protoc_insertion_point(field_set_allocated:im.Friend.fnickname)
}

// -------------------------------------------------------------------

// CtrlFriendRequest

// int64 uid = 1;
inline void CtrlFriendRequest::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CtrlFriendRequest::uid() const {
  // @@protoc_insertion_point(field_get:im.CtrlFriendRequest.uid)
  return uid_;
}
inline void CtrlFriendRequest::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:im.CtrlFriendRequest.uid)
}

// int64 fid = 2;
inline void CtrlFriendRequest::clear_fid() {
  fid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CtrlFriendRequest::fid() const {
  // @@protoc_insertion_point(field_get:im.CtrlFriendRequest.fid)
  return fid_;
}
inline void CtrlFriendRequest::set_fid(::google::protobuf::int64 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:im.CtrlFriendRequest.fid)
}

// -------------------------------------------------------------------

// CtrlFriendResponse

// int32 status = 1;
inline void CtrlFriendResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 CtrlFriendResponse::status() const {
  // @@protoc_insertion_point(field_get:im.CtrlFriendResponse.status)
  return status_;
}
inline void CtrlFriendResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:im.CtrlFriendResponse.status)
}

// string err_msg = 2;
inline void CtrlFriendResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtrlFriendResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:im.CtrlFriendResponse.err_msg)
  return err_msg_.GetNoArena();
}
inline void CtrlFriendResponse::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CtrlFriendResponse.err_msg)
}
#if LANG_CXX11
inline void CtrlFriendResponse::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CtrlFriendResponse.err_msg)
}
#endif
inline void CtrlFriendResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CtrlFriendResponse.err_msg)
}
inline void CtrlFriendResponse::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CtrlFriendResponse.err_msg)
}
inline ::std::string* CtrlFriendResponse::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:im.CtrlFriendResponse.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFriendResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:im.CtrlFriendResponse.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFriendResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:im.CtrlFriendResponse.err_msg)
}

// repeated .im.Friend friends = 3;
inline int CtrlFriendResponse::friends_size() const {
  return friends_.size();
}
inline void CtrlFriendResponse::clear_friends() {
  friends_.Clear();
}
inline ::im::Friend* CtrlFriendResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:im.CtrlFriendResponse.friends)
  return friends_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::Friend >*
CtrlFriendResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:im.CtrlFriendResponse.friends)
  return &friends_;
}
inline const ::im::Friend& CtrlFriendResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:im.CtrlFriendResponse.friends)
  return friends_.Get(index);
}
inline ::im::Friend* CtrlFriendResponse::add_friends() {
  // @@protoc_insertion_point(field_add:im.CtrlFriendResponse.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::Friend >&
CtrlFriendResponse::friends() const {
  // @@protoc_insertion_point(field_list:im.CtrlFriendResponse.friends)
  return friends_;
}

// -------------------------------------------------------------------

// MessageItem

// int64 fromid = 1;
inline void MessageItem::clear_fromid() {
  fromid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageItem::fromid() const {
  // @@protoc_insertion_point(field_get:im.MessageItem.fromid)
  return fromid_;
}
inline void MessageItem::set_fromid(::google::protobuf::int64 value) {
  
  fromid_ = value;
  // @@protoc_insertion_point(field_set:im.MessageItem.fromid)
}

// int64 toid = 2;
inline void MessageItem::clear_toid() {
  toid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageItem::toid() const {
  // @@protoc_insertion_point(field_get:im.MessageItem.toid)
  return toid_;
}
inline void MessageItem::set_toid(::google::protobuf::int64 value) {
  
  toid_ = value;
  // @@protoc_insertion_point(field_set:im.MessageItem.toid)
}

// string content = 3;
inline void MessageItem::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageItem::content() const {
  // @@protoc_insertion_point(field_get:im.MessageItem.content)
  return content_.GetNoArena();
}
inline void MessageItem::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MessageItem.content)
}
#if LANG_CXX11
inline void MessageItem::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MessageItem.content)
}
#endif
inline void MessageItem::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MessageItem.content)
}
inline void MessageItem::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MessageItem.content)
}
inline ::std::string* MessageItem::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:im.MessageItem.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageItem::release_content() {
  // @@protoc_insertion_point(field_release:im.MessageItem.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageItem::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:im.MessageItem.content)
}

// int64 msgid = 4;
inline void MessageItem::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageItem::msgid() const {
  // @@protoc_insertion_point(field_get:im.MessageItem.msgid)
  return msgid_;
}
inline void MessageItem::set_msgid(::google::protobuf::int64 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:im.MessageItem.msgid)
}

// int64 timestamp = 5;
inline void MessageItem::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageItem::timestamp() const {
  // @@protoc_insertion_point(field_get:im.MessageItem.timestamp)
  return timestamp_;
}
inline void MessageItem::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:im.MessageItem.timestamp)
}

// -------------------------------------------------------------------

// MessageResponse

// int64 msgid = 1;
inline void MessageResponse::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageResponse::msgid() const {
  // @@protoc_insertion_point(field_get:im.MessageResponse.msgid)
  return msgid_;
}
inline void MessageResponse::set_msgid(::google::protobuf::int64 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:im.MessageResponse.msgid)
}

// int64 timestamp = 2;
inline void MessageResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:im.MessageResponse.timestamp)
  return timestamp_;
}
inline void MessageResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:im.MessageResponse.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::im::MSG> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::MSG>() {
  return ::im::MSG_descriptor();
}
template <> struct is_proto_enum< ::im::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::Status>() {
  return ::im::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2eproto
