/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LogicInterface_H
#define LogicInterface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "im_types.h"

namespace im {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LogicInterfaceIf {
 public:
  virtual ~LogicInterfaceIf() {}
  virtual void SendMessage(const Request& message) = 0;
  virtual void AckMessage(const Response& message) = 0;
};

class LogicInterfaceIfFactory {
 public:
  typedef LogicInterfaceIf Handler;

  virtual ~LogicInterfaceIfFactory() {}

  virtual LogicInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LogicInterfaceIf* /* handler */) = 0;
};

class LogicInterfaceIfSingletonFactory : virtual public LogicInterfaceIfFactory {
 public:
  LogicInterfaceIfSingletonFactory(const boost::shared_ptr<LogicInterfaceIf>& iface) : iface_(iface) {}
  virtual ~LogicInterfaceIfSingletonFactory() {}

  virtual LogicInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LogicInterfaceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LogicInterfaceIf> iface_;
};

class LogicInterfaceNull : virtual public LogicInterfaceIf {
 public:
  virtual ~LogicInterfaceNull() {}
  void SendMessage(const Request& /* message */) {
    return;
  }
  void AckMessage(const Response& /* message */) {
    return;
  }
};

typedef struct _LogicInterface_SendMessage_args__isset {
  _LogicInterface_SendMessage_args__isset() : message(false) {}
  bool message :1;
} _LogicInterface_SendMessage_args__isset;

class LogicInterface_SendMessage_args {
 public:

  LogicInterface_SendMessage_args(const LogicInterface_SendMessage_args&);
  LogicInterface_SendMessage_args& operator=(const LogicInterface_SendMessage_args&);
  LogicInterface_SendMessage_args() {
  }

  virtual ~LogicInterface_SendMessage_args() throw();
  Request message;

  _LogicInterface_SendMessage_args__isset __isset;

  void __set_message(const Request& val);

  bool operator == (const LogicInterface_SendMessage_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const LogicInterface_SendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_SendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_SendMessage_pargs {
 public:


  virtual ~LogicInterface_SendMessage_pargs() throw();
  const Request* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_SendMessage_result {
 public:

  LogicInterface_SendMessage_result(const LogicInterface_SendMessage_result&);
  LogicInterface_SendMessage_result& operator=(const LogicInterface_SendMessage_result&);
  LogicInterface_SendMessage_result() {
  }

  virtual ~LogicInterface_SendMessage_result() throw();

  bool operator == (const LogicInterface_SendMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogicInterface_SendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_SendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_SendMessage_presult {
 public:


  virtual ~LogicInterface_SendMessage_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogicInterface_AckMessage_args__isset {
  _LogicInterface_AckMessage_args__isset() : message(false) {}
  bool message :1;
} _LogicInterface_AckMessage_args__isset;

class LogicInterface_AckMessage_args {
 public:

  LogicInterface_AckMessage_args(const LogicInterface_AckMessage_args&);
  LogicInterface_AckMessage_args& operator=(const LogicInterface_AckMessage_args&);
  LogicInterface_AckMessage_args() {
  }

  virtual ~LogicInterface_AckMessage_args() throw();
  Response message;

  _LogicInterface_AckMessage_args__isset __isset;

  void __set_message(const Response& val);

  bool operator == (const LogicInterface_AckMessage_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const LogicInterface_AckMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_AckMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_AckMessage_pargs {
 public:


  virtual ~LogicInterface_AckMessage_pargs() throw();
  const Response* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_AckMessage_result {
 public:

  LogicInterface_AckMessage_result(const LogicInterface_AckMessage_result&);
  LogicInterface_AckMessage_result& operator=(const LogicInterface_AckMessage_result&);
  LogicInterface_AckMessage_result() {
  }

  virtual ~LogicInterface_AckMessage_result() throw();

  bool operator == (const LogicInterface_AckMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogicInterface_AckMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_AckMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_AckMessage_presult {
 public:


  virtual ~LogicInterface_AckMessage_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LogicInterfaceClient : virtual public LogicInterfaceIf {
 public:
  LogicInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogicInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendMessage(const Request& message);
  void send_SendMessage(const Request& message);
  void recv_SendMessage();
  void AckMessage(const Response& message);
  void send_AckMessage(const Response& message);
  void recv_AckMessage();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LogicInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LogicInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LogicInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AckMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LogicInterfaceProcessor(boost::shared_ptr<LogicInterfaceIf> iface) :
    iface_(iface) {
    processMap_["SendMessage"] = &LogicInterfaceProcessor::process_SendMessage;
    processMap_["AckMessage"] = &LogicInterfaceProcessor::process_AckMessage;
  }

  virtual ~LogicInterfaceProcessor() {}
};

class LogicInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LogicInterfaceProcessorFactory(const ::boost::shared_ptr< LogicInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LogicInterfaceIfFactory > handlerFactory_;
};

class LogicInterfaceMultiface : virtual public LogicInterfaceIf {
 public:
  LogicInterfaceMultiface(std::vector<boost::shared_ptr<LogicInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LogicInterfaceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LogicInterfaceIf> > ifaces_;
  LogicInterfaceMultiface() {}
  void add(boost::shared_ptr<LogicInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SendMessage(const Request& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendMessage(message);
    }
    ifaces_[i]->SendMessage(message);
  }

  void AckMessage(const Response& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AckMessage(message);
    }
    ifaces_[i]->AckMessage(message);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LogicInterfaceConcurrentClient : virtual public LogicInterfaceIf {
 public:
  LogicInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogicInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendMessage(const Request& message);
  int32_t send_SendMessage(const Request& message);
  void recv_SendMessage(const int32_t seqid);
  void AckMessage(const Response& message);
  int32_t send_AckMessage(const Response& message);
  void recv_AckMessage(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
