/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LogicInterface_H
#define LogicInterface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "im_types.h"

namespace im {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LogicInterfaceIf {
 public:
  virtual ~LogicInterfaceIf() {}
  virtual void AccessToLogic(const std::string& request) = 0;
  virtual void LogicToAccess(const AccessMessage& response) = 0;
};

class LogicInterfaceIfFactory {
 public:
  typedef LogicInterfaceIf Handler;

  virtual ~LogicInterfaceIfFactory() {}

  virtual LogicInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LogicInterfaceIf* /* handler */) = 0;
};

class LogicInterfaceIfSingletonFactory : virtual public LogicInterfaceIfFactory {
 public:
  LogicInterfaceIfSingletonFactory(const boost::shared_ptr<LogicInterfaceIf>& iface) : iface_(iface) {}
  virtual ~LogicInterfaceIfSingletonFactory() {}

  virtual LogicInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LogicInterfaceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LogicInterfaceIf> iface_;
};

class LogicInterfaceNull : virtual public LogicInterfaceIf {
 public:
  virtual ~LogicInterfaceNull() {}
  void AccessToLogic(const std::string& /* request */) {
    return;
  }
  void LogicToAccess(const AccessMessage& /* response */) {
    return;
  }
};

typedef struct _LogicInterface_AccessToLogic_args__isset {
  _LogicInterface_AccessToLogic_args__isset() : request(false) {}
  bool request :1;
} _LogicInterface_AccessToLogic_args__isset;

class LogicInterface_AccessToLogic_args {
 public:

  LogicInterface_AccessToLogic_args(const LogicInterface_AccessToLogic_args&);
  LogicInterface_AccessToLogic_args& operator=(const LogicInterface_AccessToLogic_args&);
  LogicInterface_AccessToLogic_args() : request() {
  }

  virtual ~LogicInterface_AccessToLogic_args() throw();
  std::string request;

  _LogicInterface_AccessToLogic_args__isset __isset;

  void __set_request(const std::string& val);

  bool operator == (const LogicInterface_AccessToLogic_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const LogicInterface_AccessToLogic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_AccessToLogic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_AccessToLogic_pargs {
 public:


  virtual ~LogicInterface_AccessToLogic_pargs() throw();
  const std::string* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_AccessToLogic_result {
 public:

  LogicInterface_AccessToLogic_result(const LogicInterface_AccessToLogic_result&);
  LogicInterface_AccessToLogic_result& operator=(const LogicInterface_AccessToLogic_result&);
  LogicInterface_AccessToLogic_result() {
  }

  virtual ~LogicInterface_AccessToLogic_result() throw();

  bool operator == (const LogicInterface_AccessToLogic_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogicInterface_AccessToLogic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_AccessToLogic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_AccessToLogic_presult {
 public:


  virtual ~LogicInterface_AccessToLogic_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogicInterface_LogicToAccess_args__isset {
  _LogicInterface_LogicToAccess_args__isset() : response(false) {}
  bool response :1;
} _LogicInterface_LogicToAccess_args__isset;

class LogicInterface_LogicToAccess_args {
 public:

  LogicInterface_LogicToAccess_args(const LogicInterface_LogicToAccess_args&);
  LogicInterface_LogicToAccess_args& operator=(const LogicInterface_LogicToAccess_args&);
  LogicInterface_LogicToAccess_args() {
  }

  virtual ~LogicInterface_LogicToAccess_args() throw();
  AccessMessage response;

  _LogicInterface_LogicToAccess_args__isset __isset;

  void __set_response(const AccessMessage& val);

  bool operator == (const LogicInterface_LogicToAccess_args & rhs) const
  {
    if (!(response == rhs.response))
      return false;
    return true;
  }
  bool operator != (const LogicInterface_LogicToAccess_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_LogicToAccess_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_LogicToAccess_pargs {
 public:


  virtual ~LogicInterface_LogicToAccess_pargs() throw();
  const AccessMessage* response;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_LogicToAccess_result {
 public:

  LogicInterface_LogicToAccess_result(const LogicInterface_LogicToAccess_result&);
  LogicInterface_LogicToAccess_result& operator=(const LogicInterface_LogicToAccess_result&);
  LogicInterface_LogicToAccess_result() {
  }

  virtual ~LogicInterface_LogicToAccess_result() throw();

  bool operator == (const LogicInterface_LogicToAccess_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogicInterface_LogicToAccess_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicInterface_LogicToAccess_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicInterface_LogicToAccess_presult {
 public:


  virtual ~LogicInterface_LogicToAccess_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LogicInterfaceClient : virtual public LogicInterfaceIf {
 public:
  LogicInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogicInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AccessToLogic(const std::string& request);
  void send_AccessToLogic(const std::string& request);
  void recv_AccessToLogic();
  void LogicToAccess(const AccessMessage& response);
  void send_LogicToAccess(const AccessMessage& response);
  void recv_LogicToAccess();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LogicInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LogicInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LogicInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AccessToLogic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LogicToAccess(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LogicInterfaceProcessor(boost::shared_ptr<LogicInterfaceIf> iface) :
    iface_(iface) {
    processMap_["AccessToLogic"] = &LogicInterfaceProcessor::process_AccessToLogic;
    processMap_["LogicToAccess"] = &LogicInterfaceProcessor::process_LogicToAccess;
  }

  virtual ~LogicInterfaceProcessor() {}
};

class LogicInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LogicInterfaceProcessorFactory(const ::boost::shared_ptr< LogicInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LogicInterfaceIfFactory > handlerFactory_;
};

class LogicInterfaceMultiface : virtual public LogicInterfaceIf {
 public:
  LogicInterfaceMultiface(std::vector<boost::shared_ptr<LogicInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LogicInterfaceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LogicInterfaceIf> > ifaces_;
  LogicInterfaceMultiface() {}
  void add(boost::shared_ptr<LogicInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AccessToLogic(const std::string& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AccessToLogic(request);
    }
    ifaces_[i]->AccessToLogic(request);
  }

  void LogicToAccess(const AccessMessage& response) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LogicToAccess(response);
    }
    ifaces_[i]->LogicToAccess(response);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LogicInterfaceConcurrentClient : virtual public LogicInterfaceIf {
 public:
  LogicInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogicInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AccessToLogic(const std::string& request);
  int32_t send_AccessToLogic(const std::string& request);
  void recv_AccessToLogic(const int32_t seqid);
  void LogicToAccess(const AccessMessage& response);
  int32_t send_LogicToAccess(const AccessMessage& response);
  void recv_LogicToAccess(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
