/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef im_TYPES_H
#define im_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace im {

class AccessMessage;

typedef struct _AccessMessage__isset {
  _AccessMessage__isset() : uid(false), beam_id(false), content(false) {}
  bool uid :1;
  bool beam_id :1;
  bool content :1;
} _AccessMessage__isset;

class AccessMessage {
 public:

  AccessMessage(const AccessMessage&);
  AccessMessage& operator=(const AccessMessage&);
  AccessMessage() : uid(0), content() {
  }

  virtual ~AccessMessage() throw();
  int64_t uid;
  std::vector<int32_t>  beam_id;
  std::string content;

  _AccessMessage__isset __isset;

  void __set_uid(const int64_t val);

  void __set_beam_id(const std::vector<int32_t> & val);

  void __set_content(const std::string& val);

  bool operator == (const AccessMessage & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(beam_id == rhs.beam_id))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const AccessMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccessMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AccessMessage &a, AccessMessage &b);

inline std::ostream& operator<<(std::ostream& out, const AccessMessage& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
