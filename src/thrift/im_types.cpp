/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "im_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace im {


AccessMessage::~AccessMessage() throw() {
}


void AccessMessage::__set_uid(const int32_t val) {
  this->uid = val;
}

void AccessMessage::__set_sate_id(const int32_t val) {
  this->sate_id = val;
}

void AccessMessage::__set_beam_id(const int32_t val) {
  this->beam_id = val;
}

void AccessMessage::__set_level(const int32_t val) {
  this->level = val;
}

void AccessMessage::__set_content(const std::string& val) {
  this->content = val;
}

uint32_t AccessMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sate_id);
          this->__isset.sate_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->beam_id);
          this->__isset.beam_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccessMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccessMessage");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sate_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sate_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("beam_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->beam_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AccessMessage &a, AccessMessage &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.sate_id, b.sate_id);
  swap(a.beam_id, b.beam_id);
  swap(a.level, b.level);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

AccessMessage::AccessMessage(const AccessMessage& other0) {
  uid = other0.uid;
  sate_id = other0.sate_id;
  beam_id = other0.beam_id;
  level = other0.level;
  content = other0.content;
  __isset = other0.__isset;
}
AccessMessage& AccessMessage::operator=(const AccessMessage& other1) {
  uid = other1.uid;
  sate_id = other1.sate_id;
  beam_id = other1.beam_id;
  level = other1.level;
  content = other1.content;
  __isset = other1.__isset;
  return *this;
}
void AccessMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AccessMessage(";
  out << "uid=" << to_string(uid);
  out << ", " << "sate_id=" << to_string(sate_id);
  out << ", " << "beam_id=" << to_string(beam_id);
  out << ", " << "level=" << to_string(level);
  out << ", " << "content=" << to_string(content);
  out << ")";
}

} // namespace
